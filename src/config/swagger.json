{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Evently",
    "termsOfService": "",
    "contact": {
      "email": "evently@localhost:5000"
    },
    "license": {
      "name": "evently",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "https://evently-backend.herokuapp.com/",
  "basePath": "/",
  "tags": [
    {
      "name": "Events",
      "description": "Everything about your Events",
      "externalDocs": {
        "description": "Find out more"
      }
    },
    {
      "name": "users",
      "description": "Operations about user",
      "externalDocs": {
        "description": "Find out more about our app"
      }
    }
  ],
  "schemes": ["https", "http"],
  "paths": {
    "api/events": {
      "post": {
        "tags": ["Events"],
        "summary": "create new event",
        "description": "",
        "operationId": "addEvent",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Provide the organizer token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Created profile object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "properties": {
                "event": {
                  "properties": {
                    "title": {
                      "type": "string",
                      "example": "How to train your dragon"
                    },
                    "description": {
                      "type": "string",
                      "example": "Ever wonder how?"
                    },
                    "body": {
                      "type": "string",
                      "example": "you have to believe"
                    },
                    "tagList": {
                      "type": "array",
                      "example": ["reactjs", "angularjs", "dragons"]
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Evently_auth": ["write:Events", "read:Events"]
          }
        ]
      }
    },
    "api/events/": {
      "get": {
        "tags": ["Events"],
        "summary": "Get a list of organizer events",
        "description": "Returns a list of events",
        "operationId": "all organizer events",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Add the token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Event not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "api/events/all": {
      "get": {
        "tags": ["Events"],
        "summary": "Get a list of all events",
        "description": "Returns a list of events",
        "operationId": "all all events",
        "produces": ["application/xml", "application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Event not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "api/events/userLocation?latitude=-0.6071596&longitude=30.6545022": {
      "get": {
        "tags": ["Events"],
        "summary": "Get a list of all events within the users current location (16km)",
        "description": "Returns a list of events",
        "operationId": "events with user location",
        "produces": ["application/xml", "application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Event not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "api/events/all?title=awesome title&&location.coutry=Uganda": {
      "get": {
        "tags": ["Events"],
        "summary": "Search events",
        "description": "Returns a list of searched events, use '&&' to add another search param",
        "operationId": "search all events",
        "produces": ["application/xml", "application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Event not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "api/events/all?sort=popularityCount:DESC&limit=2&page=2": {
      "get": {
        "tags": ["Events"],
        "summary": "Searches popular events",
        "description": "Returns a list of the most popular events, use '&limit=' to limit the search and '&page=' to access a page",
        "operationId": "popular events",
        "produces": ["application/xml", "application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Event not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "api/events/{slug}": {
      "patch": {
        "tags": ["Events"],
        "summary": "Updates a Event in the store with form data",
        "description": "",
        "operationId": "updateEventWithForm",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Add the token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          },
          {
            "in": "path",
            "name": "slug",
            "description": "Provide the event slug",
            "type": "string",
            "required": true,
            "example": "slug-123456789"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Created profile object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "Eventstore_auth": ["write:Events", "read:Events"]
          }
        ]
      },
      "get": {
        "tags": ["Events"],
        "summary": "Get single event",
        "description": "Returns a single events",
        "operationId": "single event",
        "produces": ["application/xml", "application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Event not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "api/events/{slug}/like": {
      "patch": {
        "tags": ["Events"],
        "summary": "Likes and unlike events",
        "description": "When clicked once, the selected event is liked. When you hit this endpoint the second time, the event will be unliked.",
        "operationId": "likeNUnlikeEvent",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Add the token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          },
          {
            "in": "path",
            "name": "slug",
            "description": "Provide the event slug",
            "type": "string",
            "required": true,
            "example": "slug-123456789"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "properties": {
                "isLiked": "boolean",
                "data": {
                  "properties": {
                    "isLiked": false,
                    "id": 7,
                    "slug": "title1-is-to-good-also-14860",
                    "email": "bal900007@test.com",
                    "updatedAt": "2020-07-14T18:59:33.778Z",
                    "createdAt": "2020-07-14T18:59:33.778Z"
                  }
                },
                "likedBy": "[]"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Eventstore_auth": ["write:Events", "read:Events"]
          }
        ]
      }
    },
    "api/events/liked": {
      "get": {
        "tags": ["Events"],
        "summary": "liked events",
        "description": "Retrieve events liked by the user",
        "operationId": "likeNUnlikeEvent",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Add the user token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "properties": {
                "pages": "number",
                "count": "number",
                "data": [{}]
              }
            }
          },
          "405": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Eventstore_auth": ["write:Events", "read:Events"]
          }
        ]
      }
    },
    "api/events/{slug}/similar": {
      "get": {
        "tags": ["Events"],
        "summary": "Retrieve similar events",
        "description": "Returns a list of similar events",
        "operationId": "similar events",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "slug",
            "description": "Provide the event slug",
            "type": "string",
            "required": true,
            "example": "slug-123456789"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Event not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "api/events/nearbycity?latitude=0.3801717&longitude=32.5570534": {
      "get": {
        "tags": ["Events"],
        "summary": "Retrieve events from near by cities.",
        "description": "Returns events within 15 to 40 km from the user's current location.",
        "operationId": "events from near by cities",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "slug",
            "description": "Provide the event slug",
            "type": "string",
            "required": true,
            "example": "slug-123456789"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Event not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "api/event/{slug}/post-comment": {
      "post": {
        "tags": ["Events"],
        "summary": "Create event comments",
        "description": "Create event comments ",
        "operationId": "",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "slug",
            "description": "Provide the event slug",
            "type": "string",
            "required": true,
            "example": "slug-123456789"
          }
        ],
        "responses": {
          "201": {
            "description": "successfully response",
            "schema": {
              "properties": {
                "user": {
                  "properties": {
                    "text": "comment text",
                    "ishidden": true,
                    "img": "www.mypic.avatar.png",
                    "user": 1,
                    "event": "awesome-18445"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "api/event/{slug}/event-comment/1": {
      "get": {
        "tags": ["Event comment"],
        "summary": "Retrieve a single event comment.",
        "description": "Retruns a single comment",
        "operationId": "",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "slug",
            "description": "Provide the event slug",
            "type": "string",
            "required": true,
            "example": "slug-123456789"
          },
          {
            "in": "path",
            "name": "commentId",
            "description": "Provide the comment id",
            "type": "integer",
            "required": true,
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Event not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "put": {
        "tags": ["Event comment"],
        "summary": "Update a single event comment.",
        "description": "Update a single comment",
        "operationId": "",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "slug",
            "description": "Provide the event slug",
            "type": "string",
            "required": true,
            "example": "slug-123456789"
          },
          {
            "in": "path",
            "name": "commentId",
            "description": "Provide the comment id",
            "type": "integer",
            "required": true,
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Event not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "api/event/{slug}/delete-comment/1": {
      "put": {
        "tags": ["Event comment"],
        "summary": "delete a single event comment.",
        "description": "delete a single comment",
        "operationId": "",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "slug",
            "description": "Provide the event slug",
            "type": "string",
            "required": true,
            "example": "slug-123456789"
          },
          {
            "in": "path",
            "name": "commentId",
            "description": "Provide the comment id",
            "type": "integer",
            "required": true,
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Event not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "api/event/comment/1/like": {
      "put": {
        "tags": ["Like event comment"],
        "summary": "Like a single event",
        "description": "like a comment event",
        "operationId": "",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "commentId",
            "description": "Provide the comment id",
            "type": "string",
            "required": true,
            "example": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Event not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "api/event/comment/1/dislike": {
      "put": {
        "tags": ["dislike event comment"],
        "summary": "dislike a single event",
        "description": "dislike a comment event",
        "operationId": "",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "commentId",
            "description": "Provide the comment id",
            "type": "string",
            "required": true,
            "example": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Event not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "api/event/comment/:commentId/replay": {
      "post": {
        "tags": ["Replay"],
        "summary": "Create event Replay comments",
        "description": "Create Replay to event comment ",
        "operationId": "",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "commentId",
            "description": "Provide the comment Id",
            "type": "integer",
            "required": true,
            "example": "1"
          }
        ],
        "responses": {
          "201": {
            "description": "successfully response",
            "schema": {
              "properties": {
                "user": {
                  "properties": {
                    "text": "comment text",
                    "ishidden": true,
                    "img": "www.mypic.avatar.png",
                    "user": 1,
                    "event": "awesome-18445"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "api/event/comment/:commentId/replay/1": {
      "get": {
        "tags": ["Replay"],
        "summary": "get one Replay comments",
        "description": "get Replay to event comment ",
        "operationId": "",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "commentId",
            "description": "Provide the comment Id",
            "type": "integer",
            "required": true,
            "example": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Event not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "put": {
        "tags": ["Replay"],
        "summary": "update one Replay comments",
        "description": "update Replay to event comment ",
        "operationId": "",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "commentId",
            "description": "Provide the comment Id",
            "type": "integer",
            "required": true,
            "example": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Event not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "api/event/comment/:commentId/delete-replay/1": {
      "put": {
        "tags": ["Replay"],
        "summary": "delete one Replay comments",
        "description": "delete Replay to event comment ",
        "operationId": "",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "commentId",
            "description": "Provide the comment Id",
            "type": "integer",
            "required": true,
            "example": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Event not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "api/users": {
      "post": {
        "tags": ["users"],
        "summary": "Create user",
        "description": "This can only be done by an Admin.",
        "operationId": "createUser",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully response",
            "schema": {
              "properties": {
                "user": {
                  "properties": {
                    "firstName": "techLead",
                    "lastName": "techLead",
                    "email": "joe01@test.com",
                    "password": "emabush2015",
                    "avatar": "dffdfsdf",
                    "deviceToken": "dkfkfkskdf",
                    "phoneNumber": "+250783636234",
                    "location": "Kigali"
                  }
                }
              }
            }
          }
        }
      }
    },
    "api/users/login": {
      "post": {
        "tags": ["users"],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "login user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Login"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            },
            "headers": {
              "X-Rate-Limit": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              },
              "X-Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    "api/users/login/google": {
      "get": {
        "tags": ["users"],
        "summary": "Logs user into the system via google",
        "description": "",
        "operationId": "loginUser",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "login user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Login"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            },
            "headers": {
              "X-Rate-Limit": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              },
              "X-Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              }
            }
          }
        }
      }
    },
    "api/users/login/facebook": {
      "get": {
        "tags": ["users"],
        "summary": "Logs user into the system via facebook",
        "description": "",
        "operationId": "loginUser",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "login user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Login"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            },
            "headers": {
              "X-Rate-Limit": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              },
              "X-Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },

    "api/users/send-email": {
      "post": {
        "tags": ["users"],
        "summary": "Send an email to a user",
        "description": "",
        "operationId": "check the user email address",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "login user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Send-email"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User exists",
            "schema": {
              "type": "string"
            },
            "headers": {
              "X-Rate-Limit": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              },
              "X-Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              }
            }
          },
          "400": {
            "description": "User with that email does not exist"
          }
        }
      }
    },
    "api/users/reset-password": {
      "post": {
        "tags": ["users"],
        "summary": "Send an email to a user",
        "description": "",
        "operationId": "check the user email address",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "oldPassword": "OldPassword",
            "password": "password"
          }
        ],
        "responses": {
          "200": {
            "description": "User exists",
            "schema": {
              "type": "string"
            },
            "headers": {
              "X-Rate-Limit": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              },
              "X-Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              }
            }
          },
          "400": {
            "description": "User with that email does not exist"
          }
        }
      }
    },

    "api/users/verify/{token}": {
      "post": {
        "tags": ["users"],
        "summary": "Verify user's account",
        "description": "",
        "operationId": "verify user's account",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "token",
            "description": "put the token provided in the path after clicking activation button got in the email",
            "required": true,
            "schema": {
              "$ref": "#/definitions/location"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User exists",
            "schema": {
              "type": "string"
            },
            "headers": {
              "X-Rate-Limit": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              },
              "X-Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              }
            }
          },
          "400": {
            "description": "User with that email does not exist"
          }
        }
      }
    },
    "api/users/location": {
      "patch": {
        "tags": ["users"],
        "summary": "update user location",
        "description": "",
        "operationId": "update user location",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Add the token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "{ location: 'kigali' }",
            "required": true,
            "schema": {
              "$ref": "#/definitions/location"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated",
            "schema": {
              "type": "string"
            },
            "headers": {
              "X-Rate-Limit": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              },
              "X-Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              }
            }
          },
          "401": {
            "description": "Auth Error"
          }
        }
      }
    },
    "api/users/{userId}/follow": {
      "post": {
        "tags": ["users"],
        "summary": "Follow a user",
        "description": "",
        "operationId": "follow user",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Add the token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          },
          {
            "in": "path",
            "name": "userId",
            "description": "provide the user id to follow",
            "type": "string",
            "required": true,
            "example": "0002"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully followed"
          },
          "404": {
            "description": "User doesn't exist"
          },
          "409": {
            "description": "User already unfollowed"
          }
        }
      }
    },
    "api/users/{userId}/unfollow": {
      "delete": {
        "tags": ["users"],
        "summary": "Unfollow a user",
        "description": "",
        "operationId": "unfollow user",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Add the token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          },
          {
            "in": "path",
            "name": "userId",
            "description": "provide the user id to unfollow",
            "type": "string",
            "required": true,
            "example": "002"
          }
        ],
        "responses": {
          "200": {
            "description": "User unfollowed"
          },
          "404": {
            "description": "User doesn't exist"
          }
        }
      }
    },
    "api/users/user-activiy/{userId}": {
      "get": {
        "tags": ["users"],
        "summary": "get user activities",
        "description": "",
        "operationId": "",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Add the token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          },
          {
            "in": "path",
            "name": "userId",
            "description": "provide the user id",
            "type": "string",
            "required": true,
            "example": "002"
          }
        ],
        "responses": {
          "200": {
            "description": "User activities obeject"
          },
          "404": {
            "description": "User does not have any activity yet"
          }
        }
      }
    },

    "api/profile": {
      "post": {
        "tags": ["profile"],
        "summary": "create user's profile",
        "description": "",
        "operationId": "getUserByName",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Add the token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Created profile object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Profile"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "something went wrong"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": ["profile"],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "update profile",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Add the token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Created profile object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Profile"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "something went wrong"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "api/profile/userId": {
      "get": {
        "tags": ["profile"],
        "summary": "get a given user profile",
        "description": "",
        "operationId": "",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Add the token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "404": {
            "description": "Profile not found"
          }
        }
      }
    },
    "api/profile/me": {
      "get": {
        "tags": ["profile"],
        "summary": "get my profile",
        "description": "",
        "operationId": "",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Add the token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      }
    },
    "api/roles": {
      "post": {
        "tags": ["roles"],
        "summary": "create a role",
        "description": "",
        "operationId": "create a role",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Add the token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Created role object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Role"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Role"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "get": {
        "tags": ["roles"],
        "summary": "fetch all roles",
        "description": "",
        "operationId": "fetch all roles",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Add the token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          }
        ],
        "responses": {
          "300": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "api/roles/roleId": {
      "post": {
        "tags": ["roles"],
        "summary": "get one role",
        "description": "",
        "operationId": "get one role",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Add the token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": ["roles"],
        "summary": "update a role",
        "description": "",
        "operationId": "update a role",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Add the token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Update role object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Role"
            }
          }
        ],
        "responses": {
          "300": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "api/ticket": {
      "post": {
        "tags": ["ticket"],
        "summary": "create a ticket",
        "description": "",
        "operationId": "create a ticket",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Add the token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Created ticket object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Ticket"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "get": {
        "tags": ["ticket"],
        "summary": "fetch all ticket",
        "description": "",
        "operationId": "fetch all ticket",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Add the token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          }
        ],
        "responses": {
          "300": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": ["ticket"],
        "summary": "update all tickets by category",
        "description": "",
        "operationId": "update category price and status",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Add the token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Update ticket category price and status",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateTicketsByCategory"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "updated successfully",
            "schema": {
              "updatedSummary": {
                "properties": {
                  "ticket": {
                    "type": "string",
                    "example": "ticket name"
                  },
                  "status": {
                    "type": "string",
                    "example": "booked"
                  },
                  "price": {
                    "type": "interger",
                    "example": 40000
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "something went wrong"
          },
          "409": {
            "description": "User not Organizer"
          }
        }
      }
    },
    "api/ticket/upcoming": {
      "get": {
        "tags": ["ticket"],
        "summary": "fetch all user's upcoming tickets",
        "description": "",
        "operationId": "upcoming tickets",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Add the token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid request"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "api/ticket/past": {
      "get": {
        "tags": ["ticket"],
        "summary": "fetch all user's past tickets",
        "description": "",
        "operationId": "past tickets",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Add the token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid request"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "api/events/{slug}/tickets": {
      "get": {
        "tags": ["ticket"],
        "summary": "All User tickets for an event",
        "description": "",
        "operationId": "user tickets for a specific ticket",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Add the token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid request"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "api/events/{slug}/tickets/{ticketNumber}": {
      "get": {
        "tags": ["ticket"],
        "summary": "Fetch one ticket for an event for a logged in user",
        "description": "",
        "operationId": "single user ticket for an event",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Add the token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid request"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "api/feedback": {
      "post": {
        "tags": ["feedback"],
        "summary": "create a feedback",
        "description": "",
        "operationId": "create a feedback",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Add the token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Created feedback object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Feedback"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Feedback"
            }
          }
        }
      },
      "get": {
        "tags": ["feedback"],
        "summary": "fetch all feedback",
        "description": "",
        "operationId": "fetch all feedback",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Add the token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          }
        ],
        "responses": {
          "300": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "api/feedback/feedbackId": {
      "put": {
        "tags": ["feedback"],
        "summary": "update a feedback",
        "description": "",
        "operationId": "update a feedback",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Add the token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "update feedback object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Feedback"
            }
          }
        ],
        "responses": {
          "300": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Feedback"
            }
          },
          "400": {
            "description": "Invalid input supplied"
          },
          "404": {
            "description": "Feedback not found"
          }
        }
      },
      "get": {
        "tags": ["feedback"],
        "summary": "fetch one feedback",
        "description": "",
        "operationId": "fetch one feedback",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Add the token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          }
        ],
        "responses": {
          "300": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Feedback"
            }
          },
          "404": {
            "description": "Feedback not found"
          }
        }
      }
    },
    "api/ticket/ticketNumber": {
      "post": {
        "tags": ["ticket"],
        "summary": "get one ticket",
        "description": "",
        "operationId": "get one ticket",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Add the token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Created ticket object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Ticket"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid userId supplied"
          },
          "404": {
            "description": "Ticket not found"
          }
        }
      },
      "put": {
        "tags": ["ticket"],
        "summary": "update a ticket",
        "description": "",
        "operationId": "update a ticket",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Add the token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "update ticket object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateTicket"
            }
          }
        ],
        "responses": {
          "300": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "api/ticket/category": {
      "post": {
        "tags": ["ticket category"],
        "summary": "create a ticket category",
        "description": "",
        "operationId": "create a ticket category",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Add the token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Created category object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Category"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation"
          },
          "400": {
            "description": "Bad request"
          }
        }
      },
      "get": {
        "tags": ["ticket category"],
        "summary": "fetch all ticket category",
        "description": "",
        "operationId": "fetch all ticket category",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Add the token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          }
        ],
        "responses": {
          "300": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "404": {
            "description": "Item not found"
          }
        }
      }
    },
    "api/category/events/{slug}": {
      "get": {
        "tags": ["ticket category"],
        "summary": "get event ticket categories",
        "description": "",
        "operationId": "event ticket categories",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Add the token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "Item not found"
          }
        }
      }
    },
    "api/ticket/category/ticketId": {
      "get": {
        "tags": ["ticket category"],
        "summary": "get one ticket",
        "description": "",
        "operationId": "get one ticket",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Add the token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "Item not found"
          }
        }
      },
      "put": {
        "tags": ["ticket category"],
        "summary": "update a ticket category",
        "description": "",
        "operationId": "update a ticket category",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Add the token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Created category object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Category"
            }
          }
        ],
        "responses": {
          "300": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "api/payments/{slug}/free": {
      "post": {
        "tags": ["Payments/Bookings"],
        "summary": "attend free event",
        "description": "Users can attend to free events by booking a ticket",
        "operationId": "attend free event",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Provide the user token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Booked a free event",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PaymentFree"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "Item not found"
          }
        }
      }
    },
    "api/payments/{slug}/{ticketNumber}": {
      "put": {
        "tags": ["Payments/Bookings"],
        "summary": "Cancel free event attendance",
        "description": "Cancel free event attendance",
        "operationId": "Cancel free event attendance",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Provide the user token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Booked a free event",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentFree"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "Item not found"
          }
        }
      }
    },
    "api/payments/{slug}/{ticketNumber}/refund": {
      "post": {
        "tags": ["Payments/Bookings"],
        "summary": "refund payment",
        "description": "payment refunds",
        "operationId": "refund payment",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Provide the Admin token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "amount to refund",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Refund-amount"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "Item not found"
          },
          "400": {
            "description": "Operation not successful"
          },
          "403": {
            "description": "Invalid credentials"
          }
        }
      }
    },
    "api/events/{slug}/users": {
      "get": {
        "tags": ["Payments/Bookings"],
        "summary": "attendance list + canceled users",
        "description": "Fetch users who showed interest in the event by booking an attendance ticket (canceled users inclusive)",
        "operationId": "users who atleast booked a ticket",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Provide the Organizer token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Booked a ticket",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentFree"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "Item not found"
          }
        }
      }
    },
    "api/events/{slug}/attend": {
      "get": {
        "tags": ["Payments/Bookings"],
        "summary": "attendance list",
        "description": "Fetch users whose attendance is confirmed",
        "operationId": "attendance list",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Provide the Organizer token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "attendance list",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentFree"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "Item not found"
          }
        }
      }
    },
    "api/payments/{slug}/pay": {
      "post": {
        "tags": ["Payments/Bookings"],
        "summary": "pay for a paid event",
        "description": "Pay amount with momo or card to book an attendance ticket",
        "operationId": "pay for a paid event",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Provide the user token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Booked a ticket for a paid event",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PaymentPaid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "Item not found"
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "something went wrong"
          }
        }
      }
    },
    "api/experience/post-experience": {
      "post": {
        "tags": ["Experience"],
        "summary": "Post an experience",
        "description": "Post an experience",
        "produces": ["application/xml", "application/json"],
        "required": "text",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Provide the user token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Experience",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Experience"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful posted an experience",
            "schema": {
              "$ref": "#/definitions/Experience"
            }
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "api/experience": {
      "get": {
        "tags": ["Experience"],
        "summary": "get all experiences",
        "description": "get all experiences of an event",
        "produces": ["application/xml", "application/json"],
        "required": "text",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Provide the user token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Experience"
            }
          }
        }
      }
    },
    "api/experience/{experienceId}": {
      "get": {
        "tags": ["Experience"],
        "summary": "get one experience",
        "description": "get one experiences of an event",
        "produces": ["application/xml", "application/json"],
        "required": "text",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Provide the user token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          },
          {
            "in": "path",
            "name": "experienceId",
            "description": "experience id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Experience"
            }
          }
        }
      }
    },
    "api/experience/{experienceId}/update-experience": {
      "put": {
        "tags": ["Experience"],
        "summary": "update an experience",
        "description": "update an experiences of an event",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Provide the user token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          },
          {
            "in": "path",
            "name": "experienceId",
            "description": "experience id",
            "required": true,
            "example": 1
          },
          {
            "in": "body",
            "name": "body",
            "description": "Experience",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Experience"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Experience"
            }
          }
        }
      }
    },
    "api/experience/{experienceId}/like": {
      "put": {
        "tags": ["Experience"],
        "summary": "like an experience",
        "description": "like an experiences of an event",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Provide the user token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          },
          {
            "in": "path",
            "name": "experienceId",
            "description": "experience id",
            "required": true,
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "api/experience/{experienceId}/dislike": {
      "put": {
        "tags": ["Experience"],
        "summary": "dislike an experience",
        "description": "dislike an experiences of an event",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Provide the user token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          },
          {
            "in": "path",
            "name": "experienceId",
            "description": "experience id",
            "required": true,
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "api/experience/{experienceId}/delete-experience": {
      "put": {
        "tags": ["Experience"],
        "summary": "delete an experience",
        "description": "delete an experience of an event",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Provide the user token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          },
          {
            "in": "path",
            "name": "experienceId",
            "description": "experience id",
            "required": true,
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "api/experience/report-experience/{experienceId}": {
      "post": {
        "tags": ["Experience"],
        "summary": "report an experience",
        "description": "report an experience of an event",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Provide the user token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          },
          {
            "in": "path",
            "name": "experienceId",
            "description": "experience id",
            "required": true,
            "example": 1
          },
          {
            "in": "body",
            "name": "body",
            "description": "comment on an experience",
            "required": false,
            "schema": {
              "$ref": "#/definitions/report-experience"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "api/experience/{experienceId}/comment": {
      "post": {
        "tags": ["Experience"],
        "summary": "comment on an experience",
        "description": "comment on an experience of an event",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Provide the user token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          },
          {
            "in": "path",
            "name": "experienceId",
            "description": "experience id",
            "required": true,
            "example": 1
          },
          {
            "in": "body",
            "name": "body",
            "description": "comment on an experience",
            "required": false,
            "schema": {
              "$ref": "#/definitions/comment-experience"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/comment-experience"
            }
          }
        }
      }
    },
    "api/experience/{experienceId}/comment/{commentId}": {
      "get": {
        "tags": ["Experience"],
        "summary": "get a comment on an experience",
        "description": "get a comment on an experience of an event",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Provide the user token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          },
          {
            "in": "path",
            "name": "experienceId",
            "description": "experience id",
            "required": true,
            "example": 1
          },
          {
            "in": "path",
            "name": "commentId",
            "description": "comment id",
            "required": true,
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/comment-experience"
            }
          }
        }
      },
      "put": {
        "tags": ["Experience"],
        "summary": "update a comment on an experience",
        "description": "update a comment on an experience of an event",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Provide the user token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          },
          {
            "in": "path",
            "name": "experienceId",
            "description": "experience id",
            "required": true,
            "example": 1
          },
          {
            "in": "path",
            "name": "commentId",
            "description": "comment id",
            "required": true,
            "example": 1
          },
          {
            "in": "body",
            "name": "body",
            "description": "update comment on an experience",
            "required": false,
            "schema": {
              "$ref": "#/definitions/comment-experience"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/comment-experience"
            }
          }
        }
      }
    },
    "api/experience/{experienceId}/comment/{commentId}/delete-comment": {
      "put": {
        "tags": ["Experience"],
        "summary": "like a comment on an experience",
        "description": "like a comment on an experience of an event",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Provide the user token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          },
          {
            "in": "path",
            "name": "experienceId",
            "description": "experience id",
            "required": true,
            "example": 1
          },
          {
            "in": "path",
            "name": "commentId",
            "description": "comment id",
            "required": true,
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "api/experience/{experienceId}/comment/{commentId}/like": {
      "put": {
        "tags": ["Experience"],
        "summary": "like a comment on an experience",
        "description": "like a comment on an experience of an event",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Provide the user token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          },
          {
            "in": "path",
            "name": "experienceId",
            "description": "experience id",
            "required": true,
            "example": 1
          },
          {
            "in": "path",
            "name": "commentId",
            "description": "comment id",
            "required": true,
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "api/experience/{experienceId}/comment/{commentId}/dislike": {
      "put": {
        "tags": ["Experience"],
        "summary": "dislike a comment on an experience",
        "description": "dislike a comment on an experience of an event",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Provide the user token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          },
          {
            "in": "path",
            "name": "experienceId",
            "description": "experience id",
            "required": true,
            "example": 1
          },
          {
            "in": "path",
            "name": "commentId",
            "description": "comment id",
            "required": true,
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "api/experience/report-comment-experience/{commentId}": {
      "post": {
        "tags": ["Experience"],
        "summary": "report a comment on an experience",
        "description": "report a comment on an experience of an event",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Provide the user token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          },
          {
            "in": "path",
            "name": "commentId",
            "description": "comment id",
            "required": true,
            "example": 1
          },
          {
            "in": "body",
            "name": "body",
            "description": "comment on an experience",
            "required": false,
            "schema": {
              "$ref": "#/definitions/report-experience"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "api/experience/comment/{commentId}/replay": {
      "post": {
        "tags": ["Experience"],
        "summary": "reply on a comment",
        "description": "reply on a comment of an experience",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Provide the user token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          },
          {
            "in": "path",
            "name": "commentId",
            "description": "experience id",
            "required": true,
            "example": 1
          },
          {
            "in": "body",
            "name": "body",
            "description": "comment on an experience",
            "required": false,
            "schema": {
              "$ref": "#/definitions/replay-experience"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "api/experience/comment/{commentId}/replay/{replayId}": {
      "get": {
        "tags": ["Experience"],
        "summary": "get a replay on a comment",
        "description": "get a replay on a comment of an experience",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Provide the user token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          },
          {
            "in": "path",
            "name": "commentId",
            "description": "comment id",
            "required": true,
            "example": "1"
          },
          {
            "in": "path",
            "name": "replayId",
            "description": "replay id",
            "required": true,
            "type": "integer",
            "example": "1"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": ["Experience"],
        "summary": "update a replay on a comment",
        "description": "update a replay on a comment of an experience",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Provide the user token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          },
          {
            "in": "path",
            "name": "commentId",
            "description": "comment id",
            "required": true,
            "example": "1"
          },
          {
            "in": "path",
            "name": "replayId",
            "description": "replay id of a replay on a comment",
            "type": "integer",
            "required": true,
            "example": 1
          },
          {
            "in": "body",
            "name": "body",
            "description": "comment on an experience",
            "required": false,
            "schema": {
              "$ref": "#/definitions/replay-experience"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "api/experience/comment/{commentId}/replay/{replayId}/delete-replay": {
      "put": {
        "tags": ["Experience"],
        "summary": "delete a replay on a comment",
        "description": "delete a replay on a comment of an experience",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Provide the user token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          },
          {
            "in": "path",
            "name": "commentId",
            "description": "comment id",
            "required": true,
            "example": "1"
          },
          {
            "in": "path",
            "name": "replayId",
            "description": "replay id of a replay on a comment",
            "type": "integer",
            "required": true,
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "api/users/admins": {
      "get": {
        "tags": ["Admins"],
        "summary": "Get a list of super users",
        "description": "Returns a list of super users",
        "operationId": "all all super users",
        "produces": ["application/xml", "application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "api/experience/report-replay-comment-experience/{replayId}": {
      "post": {
        "tags": ["Experience"],
        "summary": "report a replay on a comment on an experience",
        "description": "report a replay on a comment on an experience of an event",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Provide the user token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          },
          {
            "in": "path",
            "name": "replayId",
            "description": "replay id",
            "required": true,
            "example": 1
          },
          {
            "in": "body",
            "name": "body",
            "description": "report a comment of a replay",
            "required": false,
            "schema": {
              "$ref": "#/definitions/report-experience"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "api/users/organizers": {
      "get": {
        "tags": ["organizers"],
        "summary": "Get a list of organizers",
        "description": "Returns a list of organizers",
        "operationId": "all all organizers",
        "produces": ["application/xml", "application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "api/featuredEvent/{slug}": {
      "post": {
        "tags": ["Featured Events"],
        "summary": "feature an event",
        "description": "Featuring events involves organizers paying for an event so that it can be featured for a specific period of time. They should pay for this offer using their preferred mode of payment and after the specified feature dates,the event should be unfeatured automatically.",
        "operationId": "feature an event",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Provide the user token",
            "type": "string",
            "required": true,
            "example": "Bearer token"
          },
          {
            "in": "path",
            "name": "slug",
            "description": "Provide the event slug",
            "type": "string",
            "required": true,
            "example": "slug-123456789"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Feature an event",
            "required": false,
            "schema": {
              "$ref": "#/definitions/FeaturedEvent"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "Item not found"
          }
        }
      },
      "get": {
        "tags": ["Featured Events"],
        "summary": "Get single featured event",
        "description": "Returns a single featured event",
        "operationId": "single featured event",
        "produces": ["application/xml", "application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Featured Event not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "api/featuredEvent/all": {
      "get": {
        "tags": ["Featured Events"],
        "summary": "Get a list of successful featured events",
        "description": "Returns a list of organizers",
        "operationId": "all featured events",
        "produces": ["application/xml", "application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "No Featured Events found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "api/verifyTickets/{slug}": {
      "put": {
        "tags": ["ticket"],
        "summary": "Verify a ticket",
        "description": "Verify a ticket when a the buyer is checked in",
        "operationId": "all verified tickets",
        "produces": ["application/xml", "application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VerifiedTicket"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "No ticket found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "api/unverifyTickets/{slug}": {
      "put": {
        "tags": ["ticket"],
        "summary": "Unverify a ticket",
        "description": "Unverify a ticket which is checked in maybe by mistake",
        "operationId": "all verified tickets",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "The user token",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VerifiedTicket"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "No ticket found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "api/verifyTickets/all": {
      "get": {
        "tags": ["ticket"],
        "summary": "Get all verified tickets",
        "description": "Get all verified tickets",
        "operationId": "all verified tickets",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "The user token",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VerifiedTicket"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "No ticket found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "api/verifyTickets?slug=XXXValue": {
      "get": {
        "tags": ["ticket"],
        "summary": "get verified tickets of a certain event",
        "description": "get verified tickets of a certain event",
        "operationId": "all verified tickets",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "The user token",
            "required": true
          },
          {
            "name": "slug",
            "in": "query",
            "description": "event slug",
            "required": true,
            "type": "String"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VerifiedTicket"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "No ticket found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "api/verifyTickets?customerId=XXXValue": {
      "put": {
        "tags": ["ticket"],
        "summary": "Get a verified tickets for a given customer",
        "description": "Get a verified ticket for a certain customer",
        "operationId": "all verified tickets",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "The user token",
            "required": true
          },
          {
            "name": "customeId",
            "in": "query",
            "description": "id of the customer",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VerifiedTicket"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "No ticket found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "api/verifyTickets/{slug}/{customerId}": {
      "put": {
        "tags": ["ticket"],
        "summary": "Get verified tickets for a given customer in regards to the event",
        "description": "Get verified tickets for a given customer in regards to the event",
        "operationId": "all verified tickets",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "The user token",
            "required": true
          },
          {
            "name": "slug",
            "in": "path",
            "description": "id of the customer",
            "required": true,
            "type": "String"
          },
          {
            "name": "customeId",
            "in": "path",
            "description": "id of the customer",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VerifiedTicket"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "No ticket found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    }
  },
  "securityDefinitions": {
    "Eventstore_auth": {
      "type": "oauth2",
      "authorizationUrl": "http://Eventstore.swagger.io/oauth/dialog",
      "flow": "implicit",
      "scopes": {
        "write:Events": "modify Events in your account",
        "read:Events": "read your Events"
      }
    },
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    }
  },
  "definitions": {
    "Category": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "designation": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Category"
      }
    },
    "Ticket": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        },
        "price": {
          "type": "array",
          "format": "[{'vvip': 2, 'table': 1, 'vip': 1}]"
        },
        "category": {
          "type": "array",
          "format": "[{'vvip': 2000, 'table': 1000, 'vip': 1000}]"
        }
      },
      "xml": {
        "name": "Category"
      }
    },
    "UpdateTicketsByCategory": {
      "type": "object",
      "properties": {
        "price": {
          "type": "array",
          "format": "[{'vvip': 2, 'table': 1, 'vip': 1}]"
        },
        "status": {
          "type": "array",
          "format": "[{'vvip': 'available', 'table': 'booked'}]"
        }
      },
      "xml": {
        "name": "Category"
      }
    },
    "UpdateTicket": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        },
        "price": {
          "type": "integer",
          "format": "int64"
        },
        "category": {
          "type": "integer",
          "format": "int64"
        }
      },
      "xml": {
        "name": "Category"
      }
    },
    "Feedback": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "title": {
          "type": "string"
        },
        "content": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Feedback"
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "redirectUrl": {
          "type": "string"
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "Login": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Login"
      }
    },
    "Profile": {
      "type": "object",
      "properties": {
        "accountType": {
          "type": "string"
        },
        "accountName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "domain": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "profilePhoto": {
          "type": "string"
        },
        "coverPhoto": {
          "type": "string"
        },
        "preferences": {
          "type": "array"
        },
        "phoneNumber": {
          "type": "string"
        },
        "instagram": {
          "type": "string"
        },
        "facebook": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Profile"
      }
    },
    "Tag": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Tag"
      }
    },
    "Send-email": {
      "type": "object",
      "required": ["email", "redirectUrl"],
      "properties": {
        "email": {
          "type": "string"
        },
        "redirectUrl": {
          "type": "string"
        }
      }
    },
    "Refund-amount": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "integer"
        }
      }
    },
    "Event": {
      "type": "object",
      "required": ["name", "photoUrls"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "title": {
          "type": "string",
          "example": "Youssoupha in Kigali"
        },
        "description": {
          "type": "string",
          "example": "Bomaye Music"
        },
        "body": {
          "type": "string",
          "example": "bg body"
        },
        "tags": {
          "type": "array",
          "xml": {
            "name": "tag",
            "wrapped": true
          },
          "items": {
            "$ref": "#/definitions/Tag"
          }
        },
        "location": {
          "type": "string",
          "example": "Kigali"
        },
        "startDate": {
          "type": "date",
          "example": "12-08-2020"
        }
      },
      "xml": {
        "name": "Event"
      }
    },
    "PaymentFree": {
      "type": "object",
      "required": ["ticket_ids", "username", "email", "phone_number"],
      "properties": {
        "ticket_ids": {
          "type": "integer",
          "format": "int64"
        },
        "username": {
          "type": "string",
          "example": "John Doe"
        },
        "email": {
          "type": "string",
          "example": "google@test.com"
        },
        "phone_number": {
          "type": "string",
          "example": "0778XXXXXXXX"
        }
      },
      "xml": {
        "name": "Payments/Bookings"
      }
    },
    "PaymentPaid": {
      "type": "object",
      "required": ["ticket_ids", "amount", "currency", "phone_number"],
      "properties": {
        "ticket_ids": {
          "type": "integer",
          "format": "int64"
        },
        "fullname": {
          "type": "string",
          "example": "John Doe"
        },
        "email": {
          "type": "string",
          "example": "google@test.com"
        },
        "phone_number": {
          "type": "string",
          "example": "0778XXXXXXXX"
        },
        "amount": {
          "type": "integer",
          "example": "50000"
        },
        "currency": {
          "type": "string",
          "example": "UGX"
        }
      },
      "xml": {
        "name": "Payments/Bookings"
      }
    },
    "VerifiedTicket": {
      "type": "object",
      "required": ["ticket_ids", "amount", "currency", "phone_number"],
      "properties": {
        "ticket_ids": {
          "type": "integer",
          "format": "int64"
        },
        "fullname": {
          "type": "string",
          "example": "John Doe"
        },
        "email": {
          "type": "string",
          "example": "google@test.com"
        },
        "phone_number": {
          "type": "string",
          "example": "0778XXXXXXXX"
        },
        "amount": {
          "type": "integer",
          "example": "50000"
        },
        "currency": {
          "type": "string",
          "example": "UGX"
        }
      },
      "xml": {
        "name": "Payments/Bookings"
      }
    },
    "userActivity": {
      "type": "object",
      "required": ["designation", "userId"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "designation": {
          "type": "string",
          "example": "Registration"
        },
        "userId": {
          "type": "integer",
          "example": 3
        }
      },
      "xml": {
        "name": "UserActiviy"
      }
    },
    "FeaturedEvent": {
      "type": "object",
      "required": ["startDate", "endDate", "currency"],
      "properties": {
        "startDate": {
          "type": "date",
          "example": "12-08-2020"
        },
        "finishDate": {
          "type": "date",
          "example": "12-08-2020"
        },
        "currency": {
          "type": "string",
          "example": "UGX"
        }
      },
      "xml": {
        "name": "featuredEvent"
      }
    },
    "Experience": {
      "type": "object",
      "required": "text",
      "properties": {
        "text": {
          "type": "string",
          "example": "This my experience"
        },
        "img": {
          "type": "string",
          "example": ["www.my.picture.com", "www.my.picture.com"]
        }
      },
      "xml": {
        "name": "Experience"
      }
    },
    "comment-experience": {
      "type": "object",
      "required": "text",
      "properties": {
        "text": {
          "type": "string",
          "example": "This my experience"
        },
        "img": {
          "type": "string",
          "example": "www.my.picture.com"
        },
        "isHidden": {
          "type": "string",
          "example": false
        }
      },
      "xml": {
        "name": "Experience"
      }
    },
    "replay-experience": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string",
          "example": "this is a replay"
        },
        "img": {
          "type": "string",
          "example": "www.my.picture.com"
        }
      },
      "xml": {
        "name": "Experience"
      }
    },
    "report-experience": {
      "type": "object",
      "properties": {
        "designation": {
          "type": "string",
          "example": "Kampala"
        }
      },
      "xml": {
        "name": "Experience"
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about evently",
    "url": "https://evently-backend.herokuapp.com/"
  }
}
